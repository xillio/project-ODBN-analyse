// Description: calculates an hash for a file
// Config usage:
// {
//      "pathSourceField" : {"path":{"toValue":"%value%"}}, specifies the field to use as a path to the file
//      "targetField" : {"path":{"toValue":"%value%"}}, specifies where to add the hash to the object
//      "smartHashing" : when smart hashing is enabled only objects that are flaged to be hashed are processed, else the object is just pushed to the next queue
// }

use Concurrency, File, Stream, Hash, System, String, Date, Web;

include etlFramework.plugins.hash.Helper as HashHelpers;

argument data = Concurrency.testInput({},[{
  "binaryhashdescending" : "6F897361E0668FB4F0A1B25183C11DED",
  "count" : "2",
  "size" : "4.4MB",
  "totalsize" : "8.8MB",
  "path" : "//sar-fil06/i$/Projects/. VIND/Strategy & Research/2 Duurzaamheid/ESG breed/Hello Future resultaten/Memo resultaten Hello Future Do6-4.docx",
  "gevondenin" : "\"[\"\"departmentsshare\"\",\"\"projectshare\"\"]\"",
  "action" : ""
}]);

init();

var counter = 0;

var object = Concurrency.pop(data.input);

while(object != null){
    if(object.xillioType == "log"){
        Concurrency.push(object, data.output);
    }
    else
    {   
        if(counter % 1000 == 0)
        {
            Concurrency.push({"timestamp":Date.format(Date.now(),"yyyy-MM-dd'T'HH:mm:ss.SSSX"), "xillioType":"log","xillioSubtype":"info","xillioMessage": "Processed lines(s): " :: counter}, data.output);
        }
        
        do {
            if(object[data.actionColumn] != null && object[data.actionColumn ] != "" && object[data.pathColumn] != null && object[data.pathColumn] != ""){
                var query = {
                    "bool" : {
                        "filter" : [
                            {
                                "term" : {
                                    "reversedVersionOrder" : 1
                                }
                            },
                            {
                                "term" : {
                                    "hierarchy.tree" : normalizePath(object[data.pathColumn])
                                }
                            }
                        ]
                    }
                };
                
                var script = {
                    "source": "ctx._source.cleanAction = params.action; ctx._source.cleanResult = params.result;",
                    "lang": "painless",
                    "params": {
                        "action": object[data.actionColumn],
                        "result" : "new"
                    }
                };
                
                var updateObject = {
                    "query" : query,
                    "script" : script
                };
                
                Concurrency.push(updateObject, data.output);
            }
            else
            {
                Concurrency.push({"timestamp":Date.format(Date.now(),"yyyy-MM-dd'T'HH:mm:ss.SSSX"), "xillioType":"log","xillioSubtype":"warning","xillioRobot":null, "xillioMessage": "Invalid mapping, skipping line...", "xillioObject":object}, data.output);
            }
        }
        fail(e){
            Concurrency.push({"timestamp":Date.format(Date.now(),"yyyy-MM-dd'T'HH:mm:ss.SSSX"), "xillioType":"log","xillioSubtype":"error","xillioRobot":System.info().robotUrl,"xillioMessage": e.message, "xillioObject":object}, data.output);
        }
        
        counter++;
     
    }
    
    object = Concurrency.pop(data.input);
}

private function normalizePath(path){
    return String.replace(path,"\\","/", false, true, 0);
}


private function init(){
    if(data.pathColumn == null){
        data.pathColumn = "hierarchy";
    }
    
    if(data.actionColumn == null){
        data.actionColumn = "action";
    }
}