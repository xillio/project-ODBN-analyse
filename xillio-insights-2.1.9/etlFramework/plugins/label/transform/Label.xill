// Description: add labels based on comparisons of values
// Config usage:
// {
//      "lables" : {
//          "name" : {"field" : {"path" : {"to" : {"value" : "%value%" }}}, "value":"valueToMatch", "type" : "startsWith, endsWith, contains, matches", "value" : "valueToTest", "labelField" : {"path" : {"to" : {"value" : "%value%" }}}, "labelValue" : "labelValue"}
//      }
// }


use Concurrency, File, Stream, Hash, System, String, Date;

include etlFramework.plugins.label.Helper as LabelHelpers;

argument data = Concurrency.testInput({}, []);

var object = Concurrency.pop(data.input);

while(object != null){
    if(object.xillioType == "log"){
        Concurrency.push(object, data.output);
    }
    else
    {   
        do {
            
            foreach(label in data.labels){
                var valueToTest = LabelHelpers->getFieldValue(object, label.field);
                
                if(label.type == "startsWith"){
                    if(String.startsWith(valueToTest, label.value)){
                        object = LabelHelpers->setFieldValue(object, LabelHelpers->prepareField(label.labelField, label.labelValue));
                    }
                }
                else if(label.type == "endWith"){
                    if(String.endsWith(valueToTest, label.value)){
                        object = LabelHelpers->setFieldValue(object, LabelHelpers->prepareField(label.labelField, label.labelValue));
                    }
                }
                else if(label.type == "contains"){
                    if(String.contains(valueToTest, label.value)){
                        object = LabelHelpers->setFieldValue(object, LabelHelpers->prepareField(label.labelField, label.labelValue));
                    }
                }
                else if(label.type == "matches"){
                    if(String.matches(valueToTest, label.value)){
                        object = LabelHelpers->setFieldValue(object, LabelHelpers->prepareField(label.labelField, label.labelValue));
                    }
                }
                
                
            }
            
            Concurrency.push(object, data.output);
        }
        fail(e){
            Concurrency.push({"timestamp":Date.format(Date.now(),"yyyy-MM-dd'T'HH:mm:ss.SSSX"), "xillioType":"log","xillioSubtype":"error","xillioRobot":System.info().robotUrl,"xillioMessage": e.message, "xillioObject":object}, data.output);
        }
    }
    
    object = Concurrency.pop(data.input);
}
