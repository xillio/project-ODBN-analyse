// Description: reads json files from an directory (containing an array of objects) and adds the objects to the queue
// Config usage:
// {
//      "path" : specifies the path of the directory containing the json files
// }

use Concurrency, System, File, Stream, Date;

argument data = Concurrency.testInput({}, []);

do {
        var files = File.iterateFiles(data.path, true);
        foreach(counter, file in files){
    
        do{
            var fileStream = File.openRead(file);
            
            var objects = System.parseJSON(Stream.getText(fileStream));
            
            foreach(object in objects){
                Concurrency.push(object, data.output);
            }
            
            if(counter % 1000 == 0) {
                Concurrency.push({"timestamp":Date.format(Date.now(),"yyyy-MM-dd'T'HH:mm:ss.SSSX"), "xillioType":"log","xillioSubtype":"info","xillioMessage": "Processed " :: counter :: " files"}, data.output);
            }
        }
        fail(e)
        {
            Concurrency.push({"timestamp":Date.format(Date.now(),"yyyy-MM-dd'T'HH:mm:ss.SSSX"), "xillioType":"log","xillioSubtype":"error","xillioRobot":System.info().robotUrl,"xillioMessage": e.message, "xillioObject":file}, data.output);
        }
    }
}
fail(e){
    Concurrency.push({"timestamp":Date.format(Date.now(),"yyyy-MM-dd'T'HH:mm:ss.SSSX"), "xillioType":"log","xillioSubtype":"error","xillioRobot":System.info().robotUrl,"xillioMessage": e.message, "xillioObject":null}, data.output);
}

