// holds Insights shared functions

use System, Concurrency, Date, File, Math;

include etlFramework.Settings as Settings;
include etlFramework.plugins.elasticsearch.Helper as ElasticsearchHelpers;

var settings = Settings->getSettings();

function initClassification()
{
    ElasticsearchHelpers->deleteIndex(settings.system.classificationIndex, settings.general.elasticsearch);
    ElasticsearchHelpers->createIndex(settings.system.classificationIndex, {}, settings.general.elasticsearch);

    foreach(type, config in settings.classification){
        foreach(query in config){
            query.analyticsClassificationType = type;
            ElasticsearchHelpers->index(query, null, settings.system.classificationIndex, settings.general.elasticsearch);
        }
    }
} 

function initRepository(repositorySettings, name){
 
    repositorySettings.config.source = name;
    repositorySettings.config.index = name;
    repositorySettings.config.index = String.toLower(repositorySettings.config.index);
    repositorySettings.config.index = String.replace(repositorySettings.config.index, "[^0-9a-zA-Z]", "");
    
    repositorySettings.enabled = true;
    
    if(Collection.length(settings.general.includedRepositories) > 0 && Collection.contains(settings.general.includedRepositories, name) == false){
        repositorySettings.enabled = false;
    }
    
    if(Collection.contains(settings.general.excludedRepositories, name)){
        repositorySettings.enabled = false;
    }
    
    if(repositorySettings.location == null){
        repositorySettings.location = "etlFramework/plugins/";
    }
    
    return repositorySettings;
}

function waitForTask(id){

    var start = Date.now();
    var completed = false;
    System.print("Waiting for task: " :: id, "info");
    
    while(!completed){
        System.print("Minutes elapsed: "::Math.floor(Date.diff(start, Date.now()).totalMinutes), "info");
        var task = ElasticsearchHelpers->getTask(id, settings.general.elasticsearch);
        if(task.body.completed != null && task.body.completed == true){
            ElasticsearchHelpers->deleteDocument(id, ".tasks", settings.general.elasticsearch);
            completed = true;
        }
        System.wait(5000);
    }
    
    System.print("Task completed:  " :: id, "info");
}
