// Description: function to control Xillio PIPE
// Config usage:
// {
//        "xillioPipe" : object containg Xillio PIPE settings {"host":"http://localhost:5050"},
//        "pipeline" : name of the pipeline to control
//        "path" : path to the results of the pipeline
//        "startPipeline" : specifies whenether to start the pipeline or only process the results
//        "source" : name of the source, for example livelink,
//        "toUdm" : specififies whenether to format the object to the udm
// }

use XURL, System, File, Stream, Concurrency, Date, String, Collection, Hash;

include plugins.pipe.Helper as PipeHelpers;

argument data = Concurrency.testInput({}, []);

var pipelineStatus;
var processedFiles = {};
var monitoring = true;

init();

if(data.startPipeline == true){
    var result = XURL.post(data.xillioPipe.host :: "/api/pipelines/" :: data.pipeline :: "/start", {}, {});
    
    if(String.startsWith(result.status.code, "2") == true){
        pipelineStatus = "RUNNING";
    }
}
else
{
    monitoring = false;
}

do {

    while(monitoring){
    
        var files = File.iterateFiles(data.path, true);
    
        foreach(counter, file in files){
            processFile(file, false);  
        }
        
        var status = XURL.get(data.xillioPipe.host :: "/api/pipelines", {});
        foreach(pipeline in status.body){
            if(pipeline.name == data.pipeline){
                pipelineStatus = pipeline.status;
            }
        }
        
        if(pipelineStatus != "RUNNING"){
            monitoring = false;
        }
    }
    
    // check final files
    var files = File.iterateFiles(data.path, true);
    foreach(counter, file in files){
        processFile(file, true);  
    }


}
fail(e){
        Concurrency.push({"timestamp":Date.format(Date.now(),"yyyy-MM-dd'T'HH:mm:ss.SSSX"), "xillioType":"log","xillioSubtype":"error","xillioRobot":System.info().robotUrl,"xillioMessage": e.message, "xillioObject":null}, data.output);
}

private function processFile(file, final){
     
     file = normalizePath(file);
     if(processedFiles[file] == null){
        
        do {
            var lastSlash = String.lastIndexOf(file, "/") + 1;
            
            var fileName = String.substring(file, lastSlash, String.length(file));
            var fileCounter = String.replace(fileName,"[^\\d]","");
            fileCounter++;
            
            if(File.exists(String.replace(file, fileName, String.replace(fileName, "[\\d]+", fileCounter))) == false && final == false){
                continue;
            }
            
            processedFiles[file] = file;
                
            Concurrency.push({"timestamp":Date.format(Date.now(),"yyyy-MM-dd'T'HH:mm:ss.SSSX"), "xillioType":"log","xillioSubtype":"info","xillioMessage": "Processing: " :: file}, data.output);
            
            var fileStream = File.openRead(file);
        
            foreach(jsonLine in Stream.iterate(fileStream)){
                var object = System.parseJSON(jsonLine);
                
                object.index = data.index;
                object.source = data.source;
                
                if(data.toUdm == true){
                    object = toUdm(object);
                }
                Concurrency.push(object, data.output);
            }
            
        }
        fail(e){
            Concurrency.push({"timestamp":Date.format(Date.now(),"yyyy-MM-dd'T'HH:mm:ss.SSSX"), "xillioType":"log","xillioSubtype":"error","xillioRobot":System.info().robotUrl,"xillioMessage": e.message, "xillioObject":file}, data.output);
        }
    }
}

private function toUdm(object){
    var udm;
    var document = {};
    
    do {
        udm = parseDocument(object);
        document = PipeHelpers->setFieldValue(object, PipeHelpers->prepareField({"udm":"%value%"}, udm)); 
    }
    
    if(object["success"] != true){
        document += parseError(object);
    }
    
    return document;
}

private function parseDocument(object){
    object.path = normalizePath(object.path);
    
    var formatted = {};
    
    formatted._id = Hash.toMD5(object.path);
    formatted.id = object.path;
    formatted.reversedVersionOrder = 1;
    formatted.versionCount = 1;
    formatted.type = "Document";
    formatted.subType = "File";
	formatted.isFile = true;
    
    if(object.properties.isDirectory == true)
    {
        formatted.type = "Container";
        formatted.subType = "Folder";
        formatted.isFile = false;
    }
    
    formatted.source = object.source;
    formatted.name = pathToName(object.path, object.properties.isDirectory);
    formatted.state = [];
    
        
    // add hidden decorators
    if(object.properties.isHidden == true){
        formatted.state[] = "hidden";
    }
    
    formatted.hierarchy = object.path;
    formatted.parent = getParentFromHierarchy(formatted.hierarchy);
    
    formatted.dateCreated = object.properties.creationTime;
    formatted.dateModified = object.properties.lastModifiedTime;
    formatted.dateAccessed = object.properties.lastAccessTime;
    
    if(formatted.type == "Document"){
        formatted.binaryExtension = pathToExtension(object.path);
        formatted.binaryByteSize = object.properties.size;
        formatted.binaryByteSizeAsNumber = object.properties.size;
        if(object.properties.MD5 != null){
            formatted.binaryHash = object.properties.MD5;
        }
        else if(object.properties.quickxorhash != null){
            formatted.binaryHash = object.properties.quickxorhash;
        }
    }
    
    formatted.language = "undefined";    
    formatted.isOriginalLanguage = true;
    formatted.deletedFromSource = false;
    
    return formatted;
        
}

private function parseError(object){
    var parsedError = {
        "timestamp" : Date.format(Date.now(),"yyyy-MM-dd'T'HH:mm:ss.SSSX"),
        "xillioType" : "log",
        "xillioSubtype" : "error",
        "xillioMessage" : object.auditLog[0].exception.type,
        "xillioObject" : object.path
    };
    
    return parsedError;
}

private function normalizePath(path){
    return String.replace(path,"\\","/", false, true, 0);
}

function pathToName(path, isDir) {
     path = String.replace(path, "(.*[/])(.*)", "$2");
     if( isDir != true ) {
        path = String.replace(path, "(\\.[\\-0-9a-zA-Z]+)$", "");
     }
     return path;
}

function pathToExtension(path) {
     var ext = String.replace(path, "(.*)([/])(.*\\.)([0-9a-zA-Z/-]+)$", "$4");
     // required because Xill returns the entire string if no match is found!
     if (String.length(ext) == String.length(path)) {
          ext = null;
     }
     return (ext);
}

private function getParentFromHierarchy(hierarchy){
    return String.replace(hierarchy, "(.*)\\/.*", "$1", true);
}

private function init(){
    if(data.xillioPipe == null){
        data.xillioPipe = {
                "host" : "http://localhost:5050"
        };
    }
    
    if(data.pipeline == null){
        data.pipeline = "scraper";
    }
    
    if(data.path == null){
        data.path = "C:/tools/xillio-pipe-1.0.12-win64/xillio-pipe-1.0.12/config/data";
        // data.path = "c:/insights/pipeOutput/scraper";
    }
    
    if(data.startPipeline == null){
        data.startPipeline = false;
    }
    
      if(data.source == null){
        data.source = "Fileshare";
    }
    
    if(data.toUdm == null){
        data.toUdm = true;
    }
}