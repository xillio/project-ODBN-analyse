use Collection, Mongo, MSSQL, Properties, File, System, String, Concurrency, Assert, Date, Excel;

include Settings as Settings;
include Commons as Commons;
//-------------------------------------------------------------------------
//						  SETUP
//-------------------------------------------------------------------------
var database;
var collection;
// Define Excel workbook
var reportName = "Report";
var path;
var workbook;
var maxDepth = 3;

var settings = Settings->getSettings();

foreach(name, repositorySettings in settings.repositories){
    
    repositorySettings = Commons->initRepository(repositorySettings, name);
    
    if(repositorySettings.enabled == true && repositorySettings.type == "pipe"){
    
        System.print("Start creating report for " :: name, "INFO");
        
        mainReport(repositorySettings);
        
        System.print("Finished creating report "::reportName::" for " :: name::" at path " :: path, "INFO");
    }else{
        
        System.print("Skipped connector type: " :: repositorySettings.type :: " for " :: name :: ". enabled = " :: repositorySettings.enabled, "INFO");
    }
}

function mainReport(config){

    database =  Mongo.connect(config.mongo.name, config.mongo.host, config.mongo.port, config.mongo.username, config.mongo.password);
    collection = config.mongo.collection;
    path = config.reports.reportPath::"/" :: config.config.source :: "-" :: getWorkbookName(reportName);
    workbook = Excel.createWorkbook(path);
    
    // Define Excel sheets
    var s = 1;
    var sheets = {
        s++: Excel.createSheet(workbook, "Totals"),
        s++: Excel.createSheet(workbook, "ContentTypes"),
        s++: Excel.createSheet(workbook, "Containers"),
        s++: Excel.createSheet(workbook, "ContentTypes per root"),
        s++: Excel.createSheet(workbook, "Properties per contentType"),
        s++: Excel.createSheet(workbook, "Categories per contentType"),
        s++: Excel.createSheet(workbook, "Extensions"),
        
    };
    
    //-------------------------------------------------------------------------
    //						  MAIN
    //-------------------------------------------------------------------------
    
    // Set headers
    
    // Totals
    s = 1;
    var c = 1; 
    addRow({c++: "Type", c++: "Total", c++: "Size"}, sheets[s++]);
    
    c = 1; 
    addRow({c++: "Type", c++: "ContentType", c++: "Total"}, sheets[s++]);
    
    // Containers
    c = 1; 
    addRow({c++: "Type", c++: "Path", c++: "Id", c++: "Depth", c++: "Total", c++: "Size in MB"}, sheets[s++]);
    
    // ContentTypes per Root
    c = 1; 
    addRow({c++: "Type", c++: "Path", c++: "Id", c++: "Depth", c++: "ContentType", c++: "Total"}, sheets[s++]);
    
    // Properties per ContentType
    c = 1; 
    addRow({c++: "Kind", c++: "ContentType", c++: "FieldId", c++: "Field", c++: "Total", c++: "Example"}, sheets[s++]);
    
    
    // Properties per ContentType
    c = 1; 
    addRow({c++: "Kind", c++: "ContentType", c++: "Category", c++: "Field", c++: "Type", c++: "Total", c++: "Example"}, sheets[s++]);
    
    // Extensions
    c = 1; 
    addRow({c++: "Extension", c++: "Total", c++: "Size"}, sheets[s++]);
    
    // Report
    s = 1;
    reportKind(sheets[s++]);
    reportContentType(sheets[s++]);
    reportContainers(sheets[s++]);
    reportContentTypesPerRoot(sheets[s++]);
    reportPropertiesPerContentType(sheets[s++]);
    reportCategoriesPerContentType(sheets[s++]);
    reportExtensions(sheets[s++]);
    
    // Save workbook
    Excel.save(workbook);
    System.print('Created report: '::reportName::' at path ' :: path);
}



//-------------------------------------------------------------------------
//						  FUNCTION
//-------------------------------------------------------------------------

function reportKind(sheet) {
    var c = 1;
    
    var pipeline = [
        {
            "$group": {
                "_id": "$kind",
                "total": {"$sum": 1},
                "size": {"$sum": "$original.file.size"}
            }
        },
        {
            "$project": {
                "_id": 0,
                c++: "$_id",
                c++: "$total",
                c++: {"$divide": [ "$size", (1024*1024) ]}
            }
        }
    ];
    
    createReport(pipeline, sheet);
}

function reportContentType(sheet) {
    var c = 1;
    
    var pipeline = [
        {
            "$group": {
                "_id": {
                    "kind": "$kind",
                    "contentType": "$original.contentType.displayName"
                },
                "total": {"$sum": 1}
            }
        },
        {
            "$project": {
                "_id": 0,
                c++: "$_id.kind",
                c++: "$_id.contentType",
                c++: "$total"
            }
        }
    ];
    
    createReport(pipeline, sheet);
}


function reportContainers(sheet) {
    var c = 1;
    
    var pipeline = [
        {
            "$match": {
                "original.container.hasChildren": true,
                "original.fileSystem.depth": {"$lte": maxDepth}
            }
        },
        {
            "$project": {
                "_id": 0,
                c++: "$kind",
                c++: "$original.fileSystem.path",
                c++: "$_id",
                c++: "$original.fileSystem.depth",
                c++: "$original.fsa.total",
                c++: {"$divide": [ "$original.fsa.size", (1024*1024) ]}
            }
        }
    ];
    
    createReport(pipeline, sheet);
}


function reportContentTypesPerRoot(sheet) {
    var c = 1;
    
    var pipeline = [
        {
            "$match": {
                "original.container.hasChildren": true,
                "original.fileSystem.depth": {"$lte": maxDepth}
            }
        },
        {
            "$unwind": "$original.fsa.contentTypes"
        },
        {
            "$project": {
                "_id": 0,
                c++: "$kind",
                c++: "$original.fileSystem.path",
                c++: "$_id",
                c++: "$original.fileSystem.depth",
                c++: "$original.fsa.contentTypes._id",
                c++: "$original.fsa.contentTypes.total"
            }
        }
    ];
    
    createReport(pipeline, sheet);
}

function reportPropertiesPerContentType(sheet) {
    var c = 1;
    
    var pipeline = 
    
    
    [
        {
            "$project": {
                "kind": "$kind",
                "contentType": "$original.contentType.displayName",
                "properties": {"$objectToArray": "$original.properties"}
            }
            
        },
        
        {
            "$unwind": "$properties"
        },
        {
            "$sort": {
                "properties.v.value": -1
            }    
        },
        {
            "$group": {
                "_id": {
                    "kind": "$kind",
                    "contentType": "$contentType",
                    "systemName": "$properties.k", 
                    "displayName": "$properties.k", 
                },
                "total": {"$sum": 1},
                "example": { "$first": "$properties.v" }
            }
        },
        
        {
            "$group": {
                "_id": {
                    "kind": "$_id.kind",
                    "contentType": "$_id.contentType",
                },
                "fields": {"$addToSet": {"systemName": "$_id.systemName","displayName": "$_id.displayName","total": "$total", "example": "$example"}}
            }
        },
        {
            "$unwind": "$fields"
        },
        {
            "$project": {
                "_id": 0,
                c++: "$_id.kind",
                c++: "$_id.contentType",
                c++: "$fields.systemName",
                c++: "$fields.displayName",
                c++: "$fields.total",
                c++: "$fields.example"
            }
        }
    ];
    
    createReport(pipeline, sheet);
}


function reportCategoriesPerContentType(sheet) {
    var c = 1;
    
    var pipeline = [
        {
            "$match": {
                "original.roles.type": "categories",
                "migration.export.categories": {"$eq": true}
            }
        },
        
        {
            "$project": {
                "kind": "$kind",
                "contentType": "$original.contentType.displayName",
                "categories": {"$objectToArray": "$modified.categories"}
            }
        },
        
        {
            "$unwind": "$categories"
        },
        
        {
            "$project": {
                "kind": "$kind",
                "contentType": "$contentType",
                "category": "$categories.k",
                "categories": {"$objectToArray": "$categories.v"}
            }
        },
        
        {
            "$unwind": "$categories"
        },
        
        {
            "$project": {
                "kind": "$kind",
                "contentType": "$contentType",
                "category": "$category",
                "field": "$categories.k",
                "value": "$categories.v.value",
                "type": "$categories.v.type",
            }
        },
        
        {
            "$match": {
                 "value": {"$ne": null}
            }  
        },
        
        {
            "$group": {
                "_id": {
                    "kind": "$kind",
                    "contentType": "$contentType",
                    "category": "$category",
                    "field": "$field",
                    "type": "$type",
                },
                "total": {"$sum": 1},
                "example": { "$first": "$value" }
            }
        },
        
        
        {
            "$project": {
                "_id": 0,
                c++: "$_id.kind",
                c++: "$_id.contentType",
                c++: "$_id.category",
                c++: "$_id.field",
                c++: "$_id.type",
                c++: "$total",
                c++: "$example"
            }
        }
        
    ];
    
    createReport(pipeline, sheet);
}

function reportExtensions(sheet) {
    var c = 1;
    
    var pipeline = [
        {
            "$match": {
                "kind": "Document",
            }
        },
        {
            "$group": {
                "_id": {"$toLower": "$original.file.extension"},
                "total": {"$sum": 1},
                "size": {"$sum": "$original.file.size"}
            }
        },
        {
            "$sort": {
                "total": -1
            }  
        },
        {
            "$project": {
                "_id": 0,
                c++: "$_id",
                c++: "$total",
                c++: {"$divide": [ "$size", (1024*1024) ]}
            }
        },
        {
            "$limit": 20
        }
    ];
    
    createReport(pipeline, sheet);
}




private function getSheets(workbook) {
    var sheets = {};
    var sheetNames = Excel.getSheetNames(workbook);
    
    foreach(index, sheetName in sheetNames) {
        sheets[index+1] = Excel.loadSheet(workbook, sheetName);
    }
    
    return sheets;
}

private function getWorkbookName(name) {
    var now = Date.parse(null, null, "nl-NL");
    var timestamp = Date.info(now).instantSeconds;

    var workbookName = name :: "_" :: timestamp;
    
    return workbookName :: ".xlsx";
}

function createReport(pipeline, sheet) {
    var rows = Mongo.aggregate(collection, pipeline, {"batchSize": 100, "allowDiskUse": true}, database);
    
    foreach(row in rows) {
        addRow(row, sheet);
    }
}

function addRow(data, sheet) {
    sheet.rows++;
    
    foreach(columnIndex, value in data) {
    if(System.typeOf(value) != ATOMIC){
        value = String.join(value, ";");
    }
        Excel.setCellValue(sheet, columnIndex, sheet.rows, value);
    }
}
