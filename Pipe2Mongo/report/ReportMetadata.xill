use Collection, Mongo, MSSQL, Properties, File, System, String, Concurrency, Assert, Date, Excel;

include Settings as Settings;
include Commons as Commons;
//-------------------------------------------------------------------------
//						  SETUP
//-------------------------------------------------------------------------
var database;
var collection;
// Define Excel workbook
var reportName = "reportMetadata";
var path;
var workbook;
var maxDepth = 3;

var settings = Settings->getSettings();

foreach(name, repositorySettings in settings.repositories){
    
    repositorySettings = Commons->initRepository(repositorySettings, name);
    
    if(repositorySettings.enabled == true && repositorySettings.type == "pipe"){
    
        System.print("Start creating report for " :: name, "INFO");
        
        mainReport(repositorySettings);
        
        System.print("Finished creating report "::reportName::" for " :: name::" at path " :: path, "INFO");
    }else{
        
        System.print("Skipped connector type: " :: repositorySettings.type :: " for " :: name :: ". enabled = " :: repositorySettings.enabled, "INFO");
    }
}

function mainReport(config){

    database =  Mongo.connect(config.mongo.name, config.mongo.host, config.mongo.port, config.mongo.username, config.mongo.password);
    collection = config.mongo.collection;
    path = config.reports.reportPath::"/" :: config.config.source :: "-" :: getWorkbookName(reportName);
    workbook = Excel.createWorkbook(path);
     
    // Define Excel sheets
    var s = 1;
    var sheets = {
        s++: Excel.createSheet(workbook, "Metadata")
        
    };
    
    //-------------------------------------------------------------------------
    //						  MAIN
    //-------------------------------------------------------------------------
    
    // Set headers
    addRow({"1": "DisplayName", "2": "SystemName", "3": "Current value", "4": "New value", "5": "Count"}, sheets[1]);
    
    // Report
    reportMetadata(sheets[1]);
    
    // Save workbook
    Excel.save(workbook);

}
//-------------------------------------------------------------------------
//						  FUNCTION
//-------------------------------------------------------------------------


function reportMetadata(sheet) {
    var c = 1;
    
    var pipeline = [{
            "$project": {
                "metadata": {"$objectToArray": "$modified.metadata"}
            }  
        },
        {
            "$unwind": "$metadata"
        },
        {
            "$group": {
                "_id": {
                    "displayName": "$metadata.v.displayName",
                    "systemName": "$metadata.v.systemName",
                    "value": "$metadata.v.value",
                },
                "total": {"$sum": 1}
            }
        },
        {
            "$sort": {
                "_id.displayName": 1,
                "_id.value": 1
            }
        },
        {
            "$project": {
                "_id": 0,
                c++: "$_id.displayName",
                c++: "$_id.systemName",
                c++: "$_id.value",
                c++: "$_id.value",
                c++: "$total"
            }
        }
    ];
    
    createReport(pipeline, sheet);
}

function reportContainers(sheet) {
    var c = 1;
    
    var pipeline = [
        {
            "$match": {
                "original.container.hasChildren": true
            }
        },
        {
            "$project": {
                "_id": 0,
                c++: "$kind",
                c++: "$original.fileSystem.path",
                c++: "$original.fileSystem.depth"
            }
        }
    ];
    
    createReport(pipeline, sheet);
}




private function getSheets(workbook) {
    var sheets = {};
    var sheetNames = Excel.getSheetNames(workbook);
    
    foreach(index, sheetName in sheetNames) {
        sheets[index+1] = Excel.loadSheet(workbook, sheetName);
    }
    
    return sheets;
}

private function getWorkbookName(name) {
    var now = Date.parse(null, null, "nl-NL");
    var timestamp = Date.info(now).instantSeconds;

    var workbookName = name :: "_" :: timestamp;
    
    return workbookName :: ".xlsx";
}

function createReport(pipeline, sheet) {
    var rows = Mongo.aggregate(collection, pipeline, {"batchSize": 100, "allowDiskUse": true}, database);
    
    foreach(row in rows) {
        addRow(row, sheet);
    }
}

function addRow(data, sheet) {
    sheet.rows++;
    
    foreach(columnIndex, value in data) {
    if(System.typeOf(value) != ATOMIC){
        value = String.join(value, ";");
    }
        Excel.setCellValue(sheet, columnIndex, sheet.rows, value);
    }
}
